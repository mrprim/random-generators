"use strict";function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj}}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj}}return _typeof(obj)}Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var names=_interopRequireWildcard(require("../constants/names"));var _pluralize=_interopRequireDefault(require("pluralize"));var _getRandom=_interopRequireDefault(require("../utils/getRandom"));var _aVsAn=_interopRequireDefault(require("../utils/aVsAn.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap;_getRequireWildcardCache=function _getRequireWildcardCache(){return cache};return cache}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj}if(obj===null||_typeof(obj)!=="object"&&typeof obj!=="function"){return{"default":obj}}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj)}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}newObj["default"]=obj;if(cache){cache.set(obj,newObj)}return newObj}var _default=function _default(){var identity=(0,_getRandom["default"])([names.JOB,names.JOB,names.ANIMAL,names.CLASS]);var adjective=(0,_getRandom["default"])([names.DESCRIPTOR]);var estate=(0,_pluralize["default"])((0,_getRandom["default"])(names.NOUN));return"".concat((0,_aVsAn["default"])(identity)," ").concat(identity," who is the ").concat(adjective," Power of ").concat((0,_pluralize["default"])(estate))};exports["default"]=_default;